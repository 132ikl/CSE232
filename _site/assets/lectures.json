{
    "Week 00": {
        "comments": "Synchronous labs begin next week (the second week of the semester). Please check your schedule and show up for your scheduled lab. All Section 730 students will be assigned a synchronous lab to attend, see details on Piazza. Each week will have videos, example code, and relevant notes. You are expected to be caught up with the material and to have read (but not solved) each lab before attending your Zoom session. To help faciliate this, certain homeworks may have labeled questions that require reading the next week's lab content.",
        "slides": {
            "Syllabus": "https://drive.google.com/open?id=1TxIzdBWI-PfHslm-aSjG5WM26XRsaQLxBKPipR32q28",
            "What is C++": "https://docs.google.com/presentation/d/14i-szTXnHrrhaLuLGY-tgqvEJfX_qJLh5lq5haCaQUI/edit?usp=sharing"
        },
        "lectures": {
            "Syllabus": {
                "video": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                "code": null
            },
            "What is C++?": {
                "video": "https://www.youtube.com/watch?v=26VSNPKsKHc",
                "code": null
            }
        }
    },
    "Week 01": {
        "slides": {
            "Names and Types": "https://docs.google.com/presentation/d/1Re4t95lPLtviMKWBjjV7VSWe13lNZ0UyWxy92ZU4W58/edit?usp=sharing"
        },
        "lectures": {
            "Names and Types": {
                "video": "https://www.youtube.com/watch?v=Dm4wWJBlQew",
                "code": ["01.2-IO.cpp"]
            },
            "Fundamental Types": {
                "video": "https://www.youtube.com/watch?v=2tPP0PvtI7g",
                "code": ["02.1-numericValues.cpp", "02.2-initialization.cpp"]
            },
            "Expressions": {
                "video": "https://www.youtube.com/watch?v=aVdtPmZ2AFE",
                "code": ["02.3-integerOps.cpp", "02.4-sideEffects.cpp", "02.5-increment.cpp"]
            },
            "Boolean and IO Ops": {
                "video": "https://www.youtube.com/watch?v=rZCwHchCF1w",
                "code": ["02.6-boolOps.cpp", "02.7-relationalOps.cpp", "02.8-floatFormatting.cpp"]
            }
        }
    },
    "Week 02": {
        "slides": {
            "Control Conditionals": "https://docs.google.com/presentation/d/1kM_bXpzac7l1jiXedfSXEFp8KNmiXzKuk1KCu7HZbug/edit?usp=sharing"
        },
        "lectures": {
            "Control Conditionals": {
                "video": "https://www.youtube.com/watch?v=uxAoS6Mwc1Q",
                "code": null
            },
            "Repetition": {
                "video": "https://www.youtube.com/watch?v=dig-DcJ7juk",
                "code": ["03.2-while.cpp", "03.3-for.cpp"]
            },
            "Non-Local Exits": {
                "video": "https://www.youtube.com/watch?v=5LyHds1ULjA",
                "code": ["03.4-breakContinue.cpp"]
            },
            "The Switch Statement": {
                "video": "https://www.youtube.com/watch?v=DdSvGeJZAyo",
                "code": ["03.6-switch.cpp"]
            }
        }
    },
    "Week 03": {
        "slides": {
            "Functions": "https://docs.google.com/presentation/d/10-YMPjlYbySELzAdXo4VsovOgu1ze1IYBMVF-5KwEk0/edit?usp=sharing",
            "Type Modifiers": "https://docs.google.com/presentation/d/1Es5pD8a0gJvu5-qzJY_em5RQJBTgCrDK_AoMZFs3mvw/edit?usp=sharing"
        },
        "lectures": {
            "Functions": {
                "video": "https://www.youtube.com/watch?v=Jmwday62wJc",
                "code": ["04.1-temperatureFns.cpp", "04.2-my_sqrt.cpp", "04.3-reverseIntFns.cpp"]
            },
            "Scope": {
                "video": "https://www.youtube.com/watch?v=MSyQ_KcxBic",
                "code": ["04.4-scope.cpp"]
            },
            "Type Modifiers and References": {
                "video": "https://www.youtube.com/watch?v=4pZe49g1Qlc",
                "code": ["05.1-references.cpp"]
            },
            "Pointers": {
                "video": "https://www.youtube.com/watch?v=izRTipuExao",
                "code": ["05.2-pointers.cpp"]
            }
        }
    },
    "Week 04": {
        "slides": {
            "Type Modifiers Part 2": "https://drive.google.com/open?id=1tzVVgcN35-OSPjuDmzsBnJfjwJ3YCQoXcfBMHWCiAXY",
            "Strings": "https://drive.google.com/open?id=1pkwRkG6oExzp5BukjuinIbcVaBKubT75TTpJvUC7x5U"
        },
        "lectures": {
            "Pointers Visualized": {
                "video": "https://www.youtube.com/watch?v=js8u2WZJvn8",
                "code": null
            },
            "Const": {
                "video": "https://www.youtube.com/watch?v=myQqQUxeDtI",
                "code": ["05.3-const.cpp"]
            },
            "Type Inference": {
                "video": "https://www.youtube.com/watch?v=hmSRTjcfI-I",
                "code": ["05.4-auto.cpp"]
            },
            "The Unsigned Type": {
                "video": "https://www.youtube.com/watch?v=pAVDso7_Das",
                "code": ["05.5-unsigned.cpp"],
                "comments": "You should never be using unsigned types in this course! We are only covering them because they are a part of the C++ language (and some less modern code may use them). Any time you encounter an unsigned type, you should immediately cast it to a signed type."
            },
            "Chars": {
                "video": "https://www.youtube.com/watch?v=39FBf3QzyJ8",
                "code": ["06.1-chars.cpp", "06.2-charOps.cpp"]
            },
            "Strings": {
                "video": "https://www.youtube.com/watch?v=-0t93juV_f4",
                "code": ["06.3-basic_strings.cpp"]
            },
            "More String Methods": {
                "video": "https://www.youtube.com/watch?v=sLFF8gZy3d8",
                "code": ["06.4-input.cpp", "06.5-range.cpp", "06.6-more_strings.cpp", "06.7-finds.cpp", "06.8-lychrel.cpp"]
            }
        }
    },
    "Week 05": {
        "slides": {
            "Functions Part 2": "https://docs.google.com/presentation/d/1NVbci9QSjah_Io-BV6gu222Mu_HX6EqxzVJ-7aDJH7k/edit?usp=sharing",
            "Multiple File Compilation": "https://docs.google.com/presentation/d/1AALs-yZUZSb8R0i1ybaO5yf8qawj2-RSwbn2CpDMBiE/edit?usp=sharing"
        },
        "lectures": {
            "Functions with References and Pointers (Oh My!)": {
                "video": "https://www.youtube.com/watch?v=p50Wun08CDA",
                "code": ["07.1-swapRef.cpp", "07.2-swapPointer.cpp", "07.3-constRefParamCircleArea.cpp"]
            },
            "Overloaded Functions": {
                "video": "https://www.youtube.com/watch?v=J5zjWBBMwQU",
                "code": ["07.4-defaults.cpp", "07.5-func_sigs.cpp", "07.6-matching.cpp"],
                "comments": "The return type of a function is not part of a function's signature. If two functions only differ by return type, it is ambiguous which function should be invoked, and hence raises a compile-time error. Apologies for the confusion."
            },
            "Templates": {
                "video": "https://www.youtube.com/watch?v=r6UpNU5ik20",
                "code": ["07.7-templateFunction.cpp", "07.8-forceTemplate.cpp"]
            },
            "Multiple File Compilation": {
                "video": "https://www.youtube.com/watch?v=jn8bNPNWfgk",
                "code": ["09.1-main.cpp", "09.1-support.cpp", "09.1-support.h"]
            },
            "Multiple File Compilation Continued": {
                "video": "https://www.youtube.com/watch?v=5Oz5a99VhZk",
                "code": ["09.2-main.cpp", "09.2-functions.cpp", "09.2-functions.h"]
            }
        }
    },
    "Week 06": {
        "slides": {
            "Vectors": "https://docs.google.com/presentation/d/1N1ajnLs6HaTrm4-4HN2-XCEtO8mszlv-xau0Fyqo8YM/edit?usp=sharing",
            "Exceptions and String Stream": "https://docs.google.com/presentation/d/1xGb8cJtcwnxHDfxJWAbb7kcYIOU6LZ2SOp1zojxw44c/edit?usp=sharing"
        },
        "lectures": {
            "Vectors": {
                "video": "https://www.youtube.com/watch?v=VzZFKoL_qxk",
                "code": ["10.1-vector.cpp", "10.2-moreVector.cpp", "10.3-sieve.cpp", "10.4-split.cpp"],
                "comments": "Minor correction; calling the vector constructor with one int argument (n) will create a vector of size n with each element default initialized (0 for numbers, empty for strings, etc.). So <code>std::vector<int> vec(5);</code> will result in a vector of 5 ones. Secondly, the capacity of a vector is only guarenteed to be equal or greater than the size. Its exact value (at constructor or later) is determined by the memory allocation used in a particular C++ implementation."
            },
            "2D Vectors": {
                "video": "https://www.youtube.com/watch?v=K7K153h3rWA",
                "code": ["10.5-2d.cpp"]
            },
            "Range Based For Loops": {
                "video": "https://www.youtube.com/watch?v=k5vOH8SmNOQ",
                "code": null
            },
            "Exceptions": {
                "video": "https://www.youtube.com/watch?v=L3_oy_LZ9_M",
                "code": ["11.1-assert.cpp", "11.2-try-substr.cpp", "11.3-stol.cpp"]
            },
            "String Streams": {
                "video": "https://www.youtube.com/watch?v=LFvD_Bl_4Rg",
                "code": ["11.5-sstream.cpp", "11.6-istringstream.cpp", "11.7-ostringstream.cpp"]
            }
        }
    },
    "Week 07": {
        "slides": {
            "Iterators": "https://docs.google.com/presentation/d/1AoQTeXVQ-oDCksrPnTZXvmz868Xeig6Qs5IVF956Y6w/edit?usp=sharing",
            "Generic Algorithms": "https://docs.google.com/presentation/d/1kIIm3Bi-fUDItEU3gWQxtv0p55GMbYJ9SYv9DUQYpxw/edit?usp=sharing"
        },
        "lectures": {
            "Iterators": {
                "video": "https://www.youtube.com/watch?v=pp4sbLq1YVQ",
                "code": ["12.1-iterators.cpp"]
            },
            "Iterators Continued": {
                "video": "https://www.youtube.com/watch?v=J8y8Ko7A83c",
                "code": ["12.2-iterators2.cpp"]
            },
            "Generic Algorithms": {
                "video": "https://www.youtube.com/watch?v=tk1ccxT_Nas",
                "code": ["13.1-accumulate.cpp"]
            },
            "Lambdas": {
                "video": "https://www.youtube.com/watch?v=juuzJMKPlDo",
                "code": null
            },
            "More Generic Algorithms": {
                "video": "https://www.youtube.com/watch?v=Cu0LU9l7OaE",
                "code": ["13.2-finds.cpp", "13.3-copy.cpp", "13.4-sort.cpp"]
            }
        }
    },
    "Week 08": {
        "slides": {
            "Streams": "https://docs.google.com/presentation/d/1DT9IzE5wPVPgoMBGoaz6pZGjzmb3KGh7MVwqf1cgIeQ/edit?usp=sharing",
            "Associative Containers": "https://docs.google.com/presentation/d/13G5Pn8-bwCkwb_tdOO6StJ4Ymj1ZEa4JVXrXWMO5MWQ/edit?usp=sharing"
        },
        "lectures": {
            "Streams": {
                "video": "https://www.youtube.com/watch?v=D0XRs89Qlbo",
                "code": null
            },
            "File Streams": {
                "video": "https://www.youtube.com/watch?v=aYzebhu7Z3I",
                "code": null
            },
            "Streams Live Code": {
                "video": "https://www.youtube.com/watch?v=FCn-kVEjcHg",
                "code": null
            },
            "Maps": {
                "video": "https://www.youtube.com/watch?v=Yf4gMobBqv0",
                "code": ["14.1-pair.cpp"]
            },
            "More Map Methods": {
                "video": "https://www.youtube.com/watch?v=r0IJFxb_Dfo",
                "code": ["14.2-map.cpp", "14.3-wordcount.cpp"]
            },
            "Sets": {
                "video": "https://www.youtube.com/watch?v=RSoXQ-lEGiY",
                "code": ["14.4-sets.cpp", "14.5-setalgorithms.cpp"] 
            },
            "Multi and Unordered Containers": {
                "video": "https://www.youtube.com/watch?v=rnFPSWwBw0k",
                "code": null
            }
        }
    },
    "Week 09": {
        "slides": {
            "Classes": "https://docs.google.com/presentation/d/1WHKZfLmcJ1lbd-94K6ExglMLiRdk_kR-a210tfGpLBY/edit?usp=sharing"
        },
        "lectures": {
            "Classes": {
                "video": "https://www.youtube.com/watch?v=G9L6IIGCeOE",
                "code": ["15.1-clock.cpp", "15.1-clock.h", "15.1-main.cpp"]
            },
            "Class Attributes": {
                "video": "https://www.youtube.com/watch?v=9DSz6Q7WTWE",
                "code": null
            },
            "Member Functions": {
                "video": "https://www.youtube.com/watch?v=6OOiJTIMEuI",
                "code": ["15.2-clock.cpp", "15.2-clock.h", "15.2-main.cpp"]
            },
            "The \"this\" Pointer": {
                "video": "https://www.youtube.com/watch?v=s2EPT3TEqV4",
                "code": null
            },
            "Iterating Over Maps": {
                "video": "https://www.youtube.com/watch?v=4AHW0EWZ5so",
                "code": ["range_based_loop_map.cpp"]
            }
        }
    },
    "Week 10": {
        "slides": {
            "Classes Part 2": "https://docs.google.com/presentation/d/1PfZqsP_MKAbGhYNzW_awN_9YSy7i7ZO-D_Za3e3FbNE/edit?usp=sharing"
        },
        "lectures": {
            "Constructors": {
                "video": "https://www.youtube.com/watch?v=SbW_2g6DH20",
                "code": null,
                "comments": "Correction; the default constructor does not initialize variables."
            },
            "Synthetic Default Constructor and Initializer Lists": {
                "video": "https://www.youtube.com/watch?v=4PFaSl2tLhY",
                "code": ["16.1-clock.cpp", "16.1-clock.h", "16.1-main.cpp"]
            },
            "Converting Constructor": {
                "video": "https://www.youtube.com/watch?v=sJ6u9XP9Y_4",
                "code": null,
                "comments": "Correction; constructors with default parameters work in the same way as functions with default parameters. <code>Clock(\"11:11:PM\")</code> will invoke the string conversion constructor, not the three-argument constructor because the three-argument constructor requires that its first argument is an int (not a string)."
            },
            "Code Walkthrough": {
                "video": "https://www.youtube.com/watch?v=lnT8fZXtdAQ",
                "code": ["16.2-clock.cpp", "16.2-clock.h", "16.2-main.cpp"]
            }
        }
    },
    "Week 11": {
        "slides": {
            "Encapsulation": "https://docs.google.com/presentation/d/1Fg8bUFT7YV5mFzVTG3i6y2Mf7kjg-b2BXmGMUUK6jdY/edit?usp=sharing"
        },
        "lectures": {
            "Encapsulation": {
                "video": "https://www.youtube.com/watch?v=vNleTHNIRV4",
                "code": null
            },
            "Const Member Functions": {
                "video": "https://www.youtube.com/watch?v=nic3B7qMFAA",
                "code": ["17.2-clock.cpp", "17.2-clock.h", "17.2-main.cpp"]
            },
            "Friend Functions": {
                "video": "https://www.youtube.com/watch?v=X5Zd1S7KT38",
                "code": null
            },
            "Overloaded Operators": {
                "video": "https://www.youtube.com/watch?v=AJ_s3wse4jg",
                "code": null
            },
            "Rule of Three": {
                "video": "https://www.youtube.com/watch?v=1NwBNgc8pWg",
                "code": ["17.4-clock.cpp", "17.4-clock.h", "17.4-main.cpp"]
            }
        }
    },
    "Week 12": {
        "slides": {
            "Arrays": "https://docs.google.com/presentation/d/1tW-3ualuhvgOg-Arkr0eFkMaB9PTdeVTWEHVGem96M0/edit?usp=sharing"
        },
        "lectures": {
            "Arrays": {
                "video": "https://www.youtube.com/watch?v=_U4oKd6Wups",
                "code": ["18.1-array.cpp"]
            },
            "Arrays and Pointers": {
                "video": "https://www.youtube.com/watch?v=8COR5EhiXps",
                "code": ["18.2-aryptrs.cpp"]
            },
            "Arrays and Functions": {
                "video": "https://www.youtube.com/watch?v=5oU7wgNLpok",
                "code": ["18.3-aryFunctions.cpp", "18.4-template.cpp"]
            },
            "Dynamic Memory": {
                "video": "https://www.youtube.com/watch?v=nkWTAHJZ70c",
                "code": ["18.5-dynamic.cpp"]
            },
            "Leaking Memory": {
                "video": "https://www.youtube.com/watch?v=07S6x_ggTlY",
                "code": ["18.7-leaker.cpp", "18.8-scope.cpp"]
            },
            "Growing Arrays": {
                "video": "https://www.youtube.com/watch?v=avcEibtxxG4",
                "code": ["growing_array.cpp"]
            }
        }
    },
    "Week 13": {
        "slides": {
            "Classes Part 3": "https://docs.google.com/presentation/d/1DUX7NRBCf-v0mcifc9Ej-AcGngIAZrxppAlf8vjSYbk/edit?usp=sharing"
        },
        "lectures": {
            "Rule of Three Review": {
                "video": "https://www.youtube.com/watch?v=mWIe_2NMiVE",
                "code": null
            },
            "Composite Class": {
                "video": "https://www.youtube.com/watch?v=Q8YuAeyVA2w",
                "code": ["19.1-main.cpp", "19.1-stack.cpp", "19.1-stack.h"]
            },
            "Bad Dynamic Memory Class": {
                "video": "https://www.youtube.com/watch?v=rYSHgP3tgdE",
                "code": ["19.2-badStack.cpp", "19.2-badStack.h", "19.2-main.cpp"]
            },
            "Fixing the Bad Dynamic Memory Class": {
                "video": "https://www.youtube.com/watch?v=ceoNhThBQr0",
                "code": ["19.3-main.cpp", "19.3-stack.cpp", "19.3-stack.h"]
            },
            "Copy and Swap Idiom": {
                "video": "https://www.youtube.com/watch?v=VvJh_avtqdU",
                "code": ["19.4-main.cpp", "19.4-stack.cpp", "19.4-stack.h"]
            },
            "Growing the Stack": {
                "video": "https://www.youtube.com/watch?v=W1nHH9eUkXg",
                "code": ["main.cpp", "stack.cpp", "stack.h"]
            },
            "Templates and Classes": {
                "video": "https://www.youtube.com/watch?v=mukWc8O-bQw",
                "code": null
            },
            "Templated Friends": {
                "video": "https://www.youtube.com/watch?v=J5uY-Zkq6LU",
                "code": ["main_composite.cpp", "stack_composite.h", "main_dynamic.cpp", "stack_dynamic.h"]
            },
            "Stack Using a Linked List": {
                "video": "https://www.youtube.com/watch?v=l5gGgkCChGg",
                "code": ["main_linked.cpp", "stack_linked.h"]
            }
        }
    },
    "Week 14": {
        "slides": {
            "Closing": "https://docs.google.com/presentation/d/1tRjcdxZeWRBTDfCcu6OxjN_zJZvkbPj63RmugEUlXTs/edit?usp=sharing"
        },
        "lectures": {
            "Recursion": {
                "video": "https://www.youtube.com/watch?v=3KaAZM7tvPQ",
                "code": ["22.1-recur.cpp"]
            },
            "More Recursion": {
                "video": "https://www.youtube.com/watch?v=zsk3yTa64zU",
                "code": ["22.2-permutation.cpp"]
            },
            "What We've Learned": {
                "video": "https://www.youtube.com/watch?v=mW1zkjkHznM",
                "code": null
            },
            "What We Didn't Teach You Yet": {
                "video": "https://www.youtube.com/watch?v=t5ZKi4Z8etc",
                "code": null
            },
            "Where To Go From Here": {
                "video": "https://www.youtube.com/watch?v=BtQkl0WbqGQ",
                "code": null
            }
        }
    }
}